# Generated by Pod::WikiDoc version 0.18

=pod

=head1 NAME

File::chdir - a more sensible way to change directories

=head1 VERSION

This documentation describes version 0.1004.

=head1 SYNOPSIS

   use File::chdir;
 
   $CWD = "/foo/bar";     # now in /foo/bar
   {
       local $CWD = "/moo/baz";  # now in /moo/baz
       ...
   }
 
   # still in /foo/bar!

=head1 DESCRIPTION

Perl's C<<< chdir() >>> has the unfortunate problem of being very, very, very
global.  If any part of your program calls C<<< chdir() >>> or if any library
you use calls C<<< chdir() >>>, it changes the current working directory for
the B<whole> program.

This sucks.

File::chdir gives you an alternative, C<<< $CWD >>> and C<<< @CWD >>>.  These two
variables combine all the power of C<<< chdir() >>>, L<File::Spec> and L<Cwd>.

=head1 $CWD

Use the C<<< $CWD >>> variable instead of C<<< chdir() >>> and Cwd.

     use File::chdir;
     $CWD = $dir;  # just like chdir($dir)!
     print $CWD;   # prints the current working directory

It can be localized, and it does the right thing.

     $CWD = "/foo";      # it's /foo out here.
     {
         local $CWD = "/bar";  # /bar in here
     }
     # still /foo out here!

C<<< $CWD >>> always returns the absolute path in the native form for the 
operating system.

C<<< $CWD >>> and normal C<<< chdir() >>> work together just fine.

=head1 @CWD

C<<< @CWD >>> represents the current working directory as an array, each
directory in the path is an element of the array.  This can often make
the directory easier to manipulate, and you don't have to fumble with
C<<< File::Spec->splitpath >>> and C<<< File::Spec->catdir >>> to make portable code.

   # Similar to chdir("/usr/local/src/perl")
   @CWD = qw(usr local src perl);

pop, push, shift, unshift and splice all work.  pop and push are
probably the most useful.

   pop @CWD;                 # same as chdir(File::Spec->updir)
   push @CWD, 'some_dir'     # same as chdir('some_dir')

C<<< @CWD >>> and C<<< $CWD >>> both work fine together.

B<NOTE> Due to a perl bug you can't localize C<<< @CWD >>>.  See L</BUGS and> for a work around.

=head1 EXAMPLES

(We omit the C<<< use File::chdir >>> from these examples for terseness)

Here's C<<< $CWD >>> instead of C<<< chdir() >>>:

     $CWD = 'foo';           # chdir('foo')

and now instead of Cwd.

     print $CWD;             # use Cwd;  print Cwd::abs_path

you can even do zsh style C<<< cd foo bar >>>

     $CWD = '/usr/local/foo';
     $CWD =~ s/usr/var/;

if you want to localize that, make sure you get the parens right

     {
         (local $CWD) =~ s/usr/var/;
         ...
     }

It's most useful for writing polite subroutines which don't leave the
program in some strange directory:

     sub foo {
         local $CWD = 'some/other/dir';
         ...do your work...
     }

which is much simpler than the equivalent:

     sub foo {
         use Cwd;
         my $orig_dir = Cwd::abs_path;
         chdir('some/other/dir');
 
         ...do your work...
 
         chdir($orig_dir);
     }

C<<< @CWD >>> comes in handy when you want to start moving up and down the
directory hierarchy in a cross-platform manner without having to use
File::Spec.

     pop @CWD;                   # chdir(File::Spec->updir);
     push @CWD, 'some', 'dir'    # chdir(File::Spec->catdir(qw(some dir)));

You can easily change your parent directory:

     # chdir from /some/dir/bar/moo to /some/dir/foo/moo
     $CWD[-2] = 'foo';

=head1 CAVEATS

=head3 Assigning to C<<< @CWD >>> calls C<<< chdir() >>> for each element

     @CWD = qw/a b c d/;

Internally, Perl clears C<<< @CWD >>> and assigns each element in turn.  Thus, this
code above will do this:

     chdir 'a';
     chdir 'a/b';
     chdir 'a/b/c';
     chdir 'a/b/c/d';

Generally, avoid assigning to C<<< @CWD >>> and just use push and pop instead.

=head3 C<<< local @CWD >>> does not work.

C<<< local @CWD> >>> will not localize C<<< @CWD >>>.  This is a bug in Perl, you
can't localize tied arrays.  As a work around localizing $CWD will
effectively localize @CWD.

     {
         local $CWD;
         pop @CWD;
         ...
     }

=head3 Volumes not handled

There is currently no way to change the current volume via File::chdir.

=head1 NOTES

C<<< $CWD >>> returns the current directory using native path separators, i.e. \ 
on Win32.  This ensures that C<<< $CWD >>> will compare correctly with directories
created using File::Spec.  For example:

     my $working_dir = File::Spec->catdir( $CWD, "foo" );
     $CWD = $working_dir;
     doing_stuff_might_chdir();
     is( $CWD, $working_dir, "back to original working_dir?" );

Deleting the last item of C<<< @CWD >>> will act like a pop.  Deleting from the
middle will throw an exception.

     delete @CWD[-1]; # OK
     delete @CWD[-2]; # Dies

What should %CWD do?  Something with volumes?

     # chdir to C:\Program Files\Sierra\Half Life ?
     $CWD{C} = '\\Program Files\\Sierra\\Half Life';

=head1 DIAGNOSTICS

If an error is encountered when changing C<<< $CWD >>> or C<<< @CWD >>>, one of
the following exceptions will be thrown:

=over

=item *

I<Can't delete except at the end of @CWD>

=item *

I<Failed to change directory to '$dir'>

=back

=head1 BUGS

Please report any bugs or feature using the CPAN Request Tracker.  
Bugs can be submitted through the web interface at 
L<http://rt.cpan.org/Dist/Display.html?Queue=File-chdir>

When submitting a bug or request, please include a test-file or a patch to an
existing test-file that illustrates the bug or desired feature.

=head1 AUTHOR

=over

=item *

Michael G Schwern E<lt>schwern@pobox.comE<gt> (original author)

=item *

David A Golden E<lt>dagolden@cpan.orgE<gt> (current maintainer)

=back

=head1 LICENSE

Copyright 2001-2003 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.
Portions copyright 2006-2007 by David A Golden E<lt>dagolden@cpan.orgE<gt>.

This program is free software; you can redistribute it andE<sol>or 
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=head1 HISTORY

Michael wanted C<<< local chdir >>> to work.  p5p didn't.  But it wasn't over!
Was it over when the Germans bombed Pearl Harbor?  Hell, no!

Abigail andE<sol>or Bryan Warnock suggested the C<<< $CWD >>> thing (Michael forgets
which).  They were right.

The C<<< chdir() >>> override was eliminated in 0.04.

David became co-maintainer with 0.06_01 to fix some chronic
Win32 path bugs.

As of 0.08, if changing C<<< $CWD >>> or C<<< @CWD >>> fails to change the directory, an
error will be thrown.

=head1 SEE ALSO

L<File::pushd>, L<File::Spec>, L<Cwd>, L<perlfunc/chdir>, 
"Animal House" L<http://www.imdb.com/title/tt0077975/quotes>


